@page "/room/{roomId}"

@inject NavigationManager NavigationManager
@inject PlayerState PlayerState
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@code{
    [Parameter] public string RoomId { get; set; }
    private string? myPlayerId;
    private bool GameStarted;
    private GameRoom? CurrentRoom;
}


@if(CurrentRoom is not null)
{
    <div class="container">
        <h3>Game room: @CurrentRoom.RoomName</h3>

        @if (CurrentRoom.Players.Count < 4)
        {
            <h4 class="info-text">Waiting for more players to join...</h4>
            <h4 class="info-text">Player count - @CurrentRoom.Players.Count</h4>
        }

        @if ((!CurrentRoom.Game.GameStarted || CurrentRoom.Game.GameOver)
       && CurrentRoom.Game.ATeamPlayer1Id == myPlayerId
       && CurrentRoom.Players.Count == 4)
        {
            <button class="btn" @onclick="StartGame">Start Game</button>
        }

        @if (CurrentRoom.Game.ATeamPlayer1Id == myPlayerId)
        {
            <button class="btn reset-btn" @onclick="ResetGame">Reset Game</button>
        }
    </div>
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        text-align: center;
    }

    h3 {
        margin-bottom: 20px;
        font-size: 24px;
    }

    .info-text {
        font-size: 18px;
        color: #ff5722;
        margin-bottom: 20px;
    }

    .btn {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .reset-btn {
        margin-top: 20px;
        background-color: #dc3545;
    }
    .reset-btn:hover {
        background-color: #bd2130;
    }
</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (!IsHubConnectionActive()) return;

        CurrentRoom = await PlayerState.HubConnection.InvokeAsync<GameRoom>("GetRoomById", RoomId);

        if (CurrentRoom is null)
            return;
        GameStarted = false;
        myPlayerId = PlayerState.HubConnection.ConnectionId;

        PlayerState.HubConnection.On<Player>("PlayerJoined", newPlayer =>
        {
            CurrentRoom.TryAddPlayer(newPlayer);
            StateHasChanged();
        });

        PlayerState.HubConnection.On<GameRoom>("UpdateGame", serverRoom =>
        {
            CurrentRoom = serverRoom;
            StateHasChanged();
        });

        PlayerState.HubConnection.On("NavigateToBattle", () =>
        {
            NavigationManager.NavigateTo("/battle");
        });

        PlayerState.HubConnection.On("GameReset", () =>
        {
            NavigationManager.NavigateTo("/", true);
        });
    }

    async Task StartGame()
    {
        if (!IsHubConnectionActive() || CurrentRoom is null)
            return;

        await PlayerState.HubConnection.InvokeAsync("StartGame", CurrentRoom.RoomId);
    }

    private async Task ResetGame()
    {
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("ResetGame");
        }
    }

    private bool IsHubConnectionActive() => PlayerState.HubConnection is not null;
}
