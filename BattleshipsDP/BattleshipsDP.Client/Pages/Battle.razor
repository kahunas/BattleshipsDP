@page "/battle"

@inject PlayerState PlayerState
@inject NavigationManager Navigation
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@if (PlayerState.HubConnection is not null)
{
    @if (!string.IsNullOrEmpty(WinnerTeam))
    {
        <h1 style="color: green;">@WinnerTeam Wins!</h1>
    }

    <div>
        <h3>Player Information</h3>
        <p>Name: @PlayerName</p>
        <p>Connection ID: @PlayerState.HubConnection.ConnectionId</p>
        <p>Team: @PlayerTeam</p>
        @if (isPlayerTurn)
        {
            <h2 style="color: blue;">Your turn!</h2>
        }
        @if (isTeamLeader && PlayerTeam == "Team A")
        {
            <button class="btn reset-btn" @onclick="ResetGame">Reset Game</button>
        }
    </div>

    @if (!battleStarted)
    {
        <div class="setup-phase" style="margin: 20px 0;">
            @if (isTeamLeader && !hasSelectedStrategy)
            {
                <div>
                    <h3>Select Team Strategy</h3>
                    <select @bind="selectedStrategy">
                        <option value="Random">Random Placement</option>
                        <option value="Edge">Edge Placement</option>
                        <option value="Spaced">Spaced Placement</option>
                    </select>
                    <button @onclick="ConfirmStrategy">Confirm Strategy</button>
                </div>
            }
            @if (!isReadyForBattle)
            {
                <div style="margin-top: 10px;">
                    @if (hasSelectedStrategy)
                    {
                        <p>Selected Strategy: @selectedStrategy</p>
                    }
                    <button @onclick="ReadyForBattle">Ready for Battle</button>
                </div>
            }
            else
            {
                <p>Waiting for other players...</p>
            }
        </div>
    }

    <div style="display: flex; gap: 50px;">
        <!-- Team Board -->
        <div>
            <h3>Team Board (@PlayerTeam)</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-boardSize) -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= boardSize; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-[dynamic end letter]) -->
                    <div style="display: grid; grid-template-rows: repeat(@boardSize, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (int i = 0; i < boardSize; i++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">
                                @(Convert.ToChar('A' + i))
                            </div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @foreach (var row in TeamCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (battleStarted)
        {
            <div>
                <label for="selectedShot">Choose a Shot:</label>
                <select @bind="selectedShot" id="selectedShot" name="selectedShot" disabled="@(!isPlayerTurn)">
                    <option value="Simple">Simple shot</option>
                    <option value="Big" disabled="@(!IsBigAvailable)">Big shot (@BigAmount)</option>
                    <option value="Piercer" disabled="@(!IsPiercerAvailable)">Piercer shot (@PiercerAmount)</option>
                    <option value="Slasher" disabled="@(!IsSlasherAvailable)">Slasher shot(@SlasherAmount)</option>
                    <option value="Cross" disabled="@(!IsCrossAvailable)">Cross shot (@CrossAmount)</option>
                </select>
                <button @onclick="ShootAtOpponentBoard" disabled="@(!isPlayerTurn)">Fire</button>
            </div>
        }

        <!-- Enemy Board -->
        <div>
            <h3>Enemy Board</h3>
            <div style="margin-left: 30px;">
                <!-- Column headers (1-boardSize) for enemy board -->
                <div style="display: flex; margin-left: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @for (int i = 1; i <= boardSize; i++)
                        {
                            <div style="text-align: center;">@i</div>
                        }
                    </div>
                </div>
                <!-- Game grid with row headers -->
                <div style="display: flex;">
                    <!-- Row headers (A-[dynamic end letter]) -->
                    <div style="display: grid; grid-template-rows: repeat(@boardSize, 50px); grid-gap: 5px; margin-right: 5px;">
                        @for (int i = 0; i < boardSize; i++)
                        {
                            <div style="height: 50px; display: flex; align-items: center;">
                                @(Convert.ToChar('A' + i))
                            </div>
                        }
                    </div>
                    <!-- Board cells -->
                    <div style="display: grid; grid-template-columns: repeat(@boardSize, 50px); grid-gap: 5px;">
                        @foreach (var row in EnemyCells)
                        {
                            @foreach (var cell in row)
                            {
                                <div @onclick="() => ToggleEnemyHighlight(cell)"
                                     style="width: 50px; height: 50px; border: 1px solid black; background-color: @(cell.GetCellBackground())">
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <h3>Shot History</h3>
            <ul>
                @foreach (var command in CommandInvoker.GetHistory())
                {
                    <li>Shot at (@command.Row, @command.Col) - Type: @command.ShotType - @(command.IsPlayerShot ? "Player" : "Enemy")</li>
                }
            </ul>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(gameOverMessage))
    {
        <div style="padding: 20px; background-color: lightgreen; border: 2px solid green; font-weight: bold;">
            @gameOverMessage
        </div>
    }
}

<style>
    .reset-btn {
        margin-top: 20px;
        background-color: #dc3545;
    }
    .reset-btn:hover {
        background-color: #bd2130;
    }
</style>

@code {
    private int boardSize; // Initialize to a default, can be modified based on user input

    private string PlayerName { get; set; } = string.Empty;
    private string PlayerTeam { get; set; } = string.Empty;
    private string WinnerTeam { get; set; } = string.Empty;
    private int? selectedRow = null;
    private int? selectedCol = null;
    private string selectedShot = "Simple";
    private bool isPlayerTurn = false;
    private string gameOverMessage = string.Empty;
    private bool isTeamLeader = false;
    private string selectedStrategy = "Random";
    private bool hasSelectedStrategy = false;
    private bool isReadyForBattle = false;
    private bool battleStarted = false;
    private bool IsBigAvailable = false;
    private bool IsSlasherAvailable = false;
    private bool IsPiercerAvailable = false;
    private bool IsCrossAvailable = false;
    private int? BigAmount = null;
    private int? PiercerAmount = null;
    private int? SlasherAmount = null;
    private int? CrossAmount = null;

    private List<List<GridCell>> TeamCells = new List<List<GridCell>>();
    private List<List<GridCell>> EnemyCells = new List<List<GridCell>>();

    private CommandInvoker CommandInvoker = new CommandInvoker();

    protected override async Task OnInitializedAsync()
    {
        if (IsHubConnectionActive())
        {
            boardSize = await PlayerState.HubConnection.InvokeAsync<int>("GetBoardSize", PlayerState.HubConnection.ConnectionId);
            InitializeBoards();
            if (PlayerState.HubConnection.State == HubConnectionState.Disconnected)
            {
                await PlayerState.HubConnection.StartAsync();
            }

            await PlayerState.HubConnection.SendAsync("PlayerReady");

            PlayerState.HubConnection.On<string, string, string, bool>("ReceivePlayerInfo", (name, connectionId, team, isLeader) =>
            {
                PlayerName = name;
                PlayerTeam = team;
                isTeamLeader = isLeader;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("YourTurn", () =>
            {
                isPlayerTurn = true;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("NotYourTurn", () =>
            {
                isPlayerTurn = false;
                InvokeAsync(StateHasChanged);
            });

            PlayerState.HubConnection.On<List<List<Square>>>("ReceiveBoardInfo", (receivedCells) =>
            {
                TeamCells = receivedCells.Select(row => row.Select(cell => new GridCell
                    {
                        State = cell,
                        Row = receivedCells.IndexOf(row),
                        Col = row.IndexOf(cell)
                    }).ToList()).ToList();
                InvokeAsync(StateHasChanged);
            });

            PlayerState.HubConnection.On<int, int>("ReceiveBlockHighlight", (row, col) =>
            {
                foreach (var enemyRow in EnemyCells)
                {
                    foreach (var enemyCell in enemyRow)
                    {
                        enemyCell.IsHighlighted = false;
                    }
                }
                EnemyCells[row][col].IsHighlighted = true;
                InvokeAsync(StateHasChanged);
            });

            PlayerState.HubConnection.On<int>("ReceiveBigAmount", async (amount) =>
            {
                await HandleBigAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceivePiercerAmount", async (amount) =>
            {
                await HandlePiercerAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceiveSlasherAmount", async (amount) =>
            {
                await HandleSlasherAmount(amount);
            });
            PlayerState.HubConnection.On<int>("ReceiveCrossAmount", async (amount) =>
            {
                await HandleCrossAmount(amount);
            });

            PlayerState.HubConnection.On<int, int, string>("ReceiveShootResult", async (row, col, result) =>
            {
                await HandleShootResult(row, col, result);
            });

            PlayerState.HubConnection.On<int, int, string>("ReceiveTeamHitResult", async (row, col, result) =>
            {
                await HandleTeamHitResult(row, col, result);
            });

            PlayerState.HubConnection.On<string>("ReceiveGameOver", async (message) =>
            {
                await HandleGameOver(message);
            });

            PlayerState.HubConnection.On<string>("ReceiveTeamStrategy", (strategy) =>
            {
                selectedStrategy = strategy;
                hasSelectedStrategy = true;
                StateHasChanged();
            });

            PlayerState.HubConnection.On("StartBattle", () =>
            {
                battleStarted = true;
                StateHasChanged();
            });
        }
    }

    private void InitializeBoards()
    {
        TeamCells.Clear();
        EnemyCells.Clear();

        for (int row = 0; row < boardSize; row++)
        {
            var teamRow = new List<GridCell>();
            var enemyRow = new List<GridCell>();
            for (int col = 0; col < boardSize; col++)
            {
                teamRow.Add(new GridCell { Row = row, Col = col });
                enemyRow.Add(new GridCell { Row = row, Col = col });
            }
            TeamCells.Add(teamRow);
            EnemyCells.Add(enemyRow);
        }
    }

    private async Task ToggleEnemyHighlight(GridCell cell)
    {
        if (!isPlayerTurn || cell == null) return;

        if (cell.State == Square.Hit || cell.State == Square.Miss)
        {
            return;
        }

        foreach (var enemyRow in EnemyCells)
        {
            foreach (var enemyCell in enemyRow)
            {
                enemyCell.IsHighlighted = false;
            }
        }

        cell.IsHighlighted = true;
        selectedRow = cell.Row;
        selectedCol = cell.Col;

        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("HighlightBlockForTeam", cell.Row, cell.Col);
        }

        StateHasChanged();
    }

    private async Task ShootAtOpponentBoard()
    {
        if (!isPlayerTurn) return;

        if (selectedRow.HasValue && selectedCol.HasValue && selectedShot != null)
        {
            if (IsHubConnectionActive())
            {
                //var shotBuilder = new ShotBuilder()
                //    .SetName(selectedShot)
                //    .SetSpread(new List<(int, int)> { (0, 0) });
                //
                //IShot shot = shotBuilder.Build();
                //
                //if (selectedShot == "Slasher")
                //{
                //    shot = new SplashDamageDecorator(shot, splashRadius: 1);
                //}
                //
                //var shotCoordinates = shot.ShotCoordinates(selectedRow.Value, selectedCol.Value);
                //
                //foreach (var (x, y) in shotCoordinates)
                //{
                //    if (x >= 0 && y >= 0 && x < EnemyCells.Count && y < EnemyCells[x].Count)
                //    {
                //        var shotCommand = new ShotCommand(x, y, selectedShot, true);
                //        CommandInvoker.ExecuteCommand(shotCommand, EnemyCells);
                //    }
                //}

                await PlayerState.HubConnection.SendAsync("ShootAtOpponent", selectedRow.Value, selectedCol.Value, selectedShot);

                isPlayerTurn = false;
            }
        }
        else
        {
            Console.WriteLine("No cell selected to shoot at.");
        }
    }

    private async Task HandleShootResult(int row, int col, string result)
    {
        var shotCommand = new ShotCommand(row, col, result, false);
        CommandInvoker.ExecuteCommand(shotCommand, EnemyCells);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleTeamHitResult(int row, int col, string result)
    {
        var cell = TeamCells[row][col];
        if (result == "hit")
        {
            cell.State = Square.Hit;
        }
        else if (result == "miss")
        {
            cell.State = Square.Miss;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleGameOver(string message)
    {
        gameOverMessage = message;

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleBigAmount(int amount)
    {
        BigAmount = amount;
        if(amount > 0)
        {
            IsBigAvailable = true;
        }
        else
        {
            IsBigAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandlePiercerAmount(int amount)
    {
        PiercerAmount = amount;
        if (amount > 0)
        {
            IsPiercerAvailable = true;
        }
        else
        {
            IsPiercerAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleSlasherAmount(int amount)
    {
        SlasherAmount = amount;
        if (amount > 0)
        {
            IsSlasherAvailable = true;
        }
        else
        {
            IsSlasherAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleCrossAmount(int amount)
    {
        CrossAmount = amount;
        if (amount > 0)
        {
            IsCrossAvailable = true;
        }
        else
        {
            IsCrossAvailable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private bool IsHubConnectionActive() => PlayerState.HubConnection is not null;

    private async Task ConfirmStrategy()
    {
        if (IsHubConnectionActive() && isTeamLeader)
        {
            await PlayerState.HubConnection.SendAsync("ConfirmTeamStrategy", selectedStrategy);
            hasSelectedStrategy = true;
            StateHasChanged();
        }
    }

    private async Task ReadyForBattle()
    {
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("PlayerReadyForBattle");
            isReadyForBattle = true;
 //           BigAmount = await PlayerState.HubConnection.InvokeAsync<int>("GetBig", PlayerState.HubConnection.ConnectionId);
 //           PiercerAmount = await PlayerState.HubConnection.InvokeAsync<int>("GetPiercer", PlayerState.HubConnection.ConnectionId);
 //           SlasherAmount = await PlayerState.HubConnection.InvokeAsync<int>("GetSlasher", PlayerState.HubConnection.ConnectionId);
 //           CrossAmount = await PlayerState.HubConnection.InvokeAsync<int>("GetCross", PlayerState.HubConnection.ConnectionId);
            StateHasChanged();
        }
    }

    private async Task ResetGame()
    {
        if (IsHubConnectionActive())
        {
            await PlayerState.HubConnection.SendAsync("ResetGame");
        }
    }
}
